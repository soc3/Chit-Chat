/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package onsiteround;

import java.awt.Button;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JOptionPane;

/**
 *
 * @author sushant oberoi
 */
public class TicTacToe extends javax.swing.JFrame {

    /**
     * Creates new form TicTacToe
     */
    static String player1, player2;
    int current;
    ServerSocket serverSocket;
    Socket socket;
    String move;
    boolean isHost, change;
    int position = 0;
    Map<String, JButton> mp;

    public TicTacToe() {
        initComponents();
        mp = new HashMap<String, JButton>();
        isHost = change = false;
        mp.put("1", btn1);
        mp.put("2", btn2);
        mp.put("3", btn3);
        mp.put("4", btn4);
        mp.put("5", btn5);
        mp.put("6", btn6);
        mp.put("7", btn7);
        mp.put("8", btn8);
        mp.put("9", btn9);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        you = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        opponent = new javax.swing.JTextField();
        host = new javax.swing.JButton();
        connect = new javax.swing.JButton();
        num = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        moveLabel = new javax.swing.JLabel();
        choose = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        score1 = new javax.swing.JTextField();
        score2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        btn8 = new javax.swing.JButton();
        btn9 = new javax.swing.JButton();
        btn1 = new javax.swing.JButton();
        btn7 = new javax.swing.JButton();
        btn2 = new javax.swing.JButton();
        btn3 = new javax.swing.JButton();
        btn6 = new javax.swing.JButton();
        btn4 = new javax.swing.JButton();
        btn5 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        turn = new javax.swing.JLabel();
        winner = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("You");

        jLabel2.setText("vs");

        jLabel3.setText("opponent");

        host.setText("HOST");
        host.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostActionPerformed(evt);
            }
        });

        connect.setText("Connect");
        connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectActionPerformed(evt);
            }
        });

        jLabel4.setText("No of games");

        moveLabel.setText("Enter Move");

        jLabel6.setText("Your score");

        jLabel7.setText("Opponent score");

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btn8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn8ActionPerformed(evt);
            }
        });

        btn9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn9ActionPerformed(evt);
            }
        });

        btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn1ActionPerformed(evt);
            }
        });

        btn7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn7ActionPerformed(evt);
            }
        });

        btn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn2ActionPerformed(evt);
            }
        });

        btn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn3ActionPerformed(evt);
            }
        });

        btn6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn6ActionPerformed(evt);
            }
        });

        btn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn4ActionPerformed(evt);
            }
        });

        btn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn5ActionPerformed(evt);
            }
        });

        jLabel5.setText("Move");

        turn.setText("no");

        winner.setText("winner");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(winner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btn8)
                                .addGap(18, 18, 18)
                                .addComponent(btn9))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btn1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btn2))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btn4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btn5)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn3)
                                    .addComponent(btn6))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(turn, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(65, 65, 65))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(you, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(93, 93, 93)
                                .addComponent(jLabel2))
                            .addComponent(moveLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(choose, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(38, 38, 38)
                                .addComponent(jButton1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel6)
                                .addComponent(connect))
                            .addComponent(jLabel3)
                            .addComponent(opponent, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addComponent(score1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(score2))
                        .addGap(34, 34, 34))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(host)
                        .addGap(65, 65, 65)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(num))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(you, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(opponent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(host)
                    .addComponent(connect)
                    .addComponent(num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(moveLabel)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(choose, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(score1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(score2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addComponent(jLabel5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn6, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(turn)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn8, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn9, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btn7, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(52, 52, 52))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(winner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(94, 94, 94))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void hostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostActionPerformed
        // TODO add your handling code here:
        you.setText(player1);
        isHost = true;
        new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    serverSocket = new ServerSocket(2341);
                    while (true) {
                        new Thread(new Runnable() {
                            Socket player = serverSocket.accept();

                            @Override
                            public void run() {
                                try {
                                    DataInputStream din = new DataInputStream(player.getInputStream());
                                    DataOutputStream dout = new DataOutputStream(player.getOutputStream());
                                    String str = din.readUTF();
                                    opponent.setText(str);
                                    dout.writeUTF(player1);
                                    String games = JOptionPane.showInputDialog(null, "enter no of games");
                                    int total = Integer.parseInt(games);
                                    num.setText(games);
                                    dout.writeUTF(games);
                                    JOptionPane.showMessageDialog(null, "enter your move x/o");
                                    String move = null;
                                    System.out.println("starting ");
                                    while (true) {
                                        move = choose.getText();
                                        System.out.println("move is " + move);
                                        if (move == null || move.equals("") || move.length() == 0) {
                                            continue;
                                        }
                                        break;
                                    }
                                    System.out.println("ended");
                                    if (move.equals("x")) {
                                        dout.writeUTF("o");
                                    } else {
                                        dout.writeUTF("x");
                                    }
                                    System.out.println("starting game " + current + " " + total);
                                    while (current < total) {
                                        for (int i = 0; i < 2; i++) {
                                            if (i == 0) {
                                                for (int j = 0; j < 9; j++) {
                                                    if (j % 2 == 0) {
                                                        turn.setText("yes");
                                                        
                                                        while (!change){
                                                            System.out.println(change);
                                                        }
                                                        System.out.println(change + " " + position);
                                                        
                                                        dout.writeUTF(Integer.toString(position));                                                   
                                                        change = false;
                                                    } else {
                                                        turn.setText("no");
                                                        String opponentMove = din.readUTF();
                                                        dout.flush();
                                                        
                                                        System.out.println("opp move2 " + opponentMove);
                                                        update(opponentMove);
                                                    }
                                                    if (checkWinner() == true) {
                                                        String pts = score1.getText();
                                                        int n = 0;
                                                        if(pts == null || pts.length() == 0 || pts == "")
                                                            n++;
                                                        else{
                                                           n = Integer.parseInt(pts);
                                                           n++;
                                                        }
                                                        score1.setText(Integer.toString(n));
                                                    }
                                                    /*else{
                                                        String pts = score2.getText();
                                                        int n = 0;
                                                        if(pts == null || pts.length() == 0 || pts == "")
                                                            n++;
                                                        else{
                                                           n = Integer.parseInt(pts);
                                                           n++;
                                                        }
                                                        score2.setText(Integer.toString(n));
                                                    }*/
                                                }
                                            } else {
                                                for (int j = 0; j < 9; j++) {
                                                    if (j % 2 != 0) {
                                                        turn.setText("yes");
                                                        while (!change);
                                                        System.out.println(change + " " + position);
                                                        dout.writeUTF(Integer.toString(position));
                                                        change = false;

                                                    } else {
                                                        turn.setText("no");
                                                        String opponentMove = din.readUTF();
                                                        dout.flush();
                                                        update(opponentMove);
                                                    }
                                                    if (checkWinner() == true) {
                                                        String pts = score1.getText();
                                                        int n = 0;
                                                        if(pts == null || pts.length() == 0 || pts == "")
                                                            n++;
                                                        else{
                                                           n = Integer.parseInt(pts);
                                                           n++;
                                                        }
                                                        score1.setText(Integer.toString(n));
                                                    }
                                                    /*else{
                                                        String pts = score2.getText();
                                                        int n = 0;
                                                        if(pts == null || pts.length() == 0 || pts == "")
                                                            n++;
                                                        else{
                                                           n = Integer.parseInt(pts);
                                                           n++;
                                                        }
                                                        score2.setText(Integer.toString(n));
                                                    }*/
                                                }
                                                for (int j = 0; j < 9; j++) {
                                                    if (j % 2 != 0) {
                                                        turn.setText("yes");
                                                        
                                                        while (!change){
                                                            System.out.println(change);
                                                        }
                                                        System.out.println(change + " " + position);
                                                        
                                                        dout.writeUTF(Integer.toString(position));                                                   
                                                        change = false;
                                                    } else {
                                                        turn.setText("no");
                                                        String opponentMove = din.readUTF();
                                                        dout.flush();
                                                        
                                                        System.out.println("opp move2 " + opponentMove);
                                                        update(opponentMove);
                                                    }
                                                    if (checkWinner() == true) {
                                                        String pts = score1.getText();
                                                        int n = 0;
                                                        if(pts == null || pts.length() == 0 || pts == "")
                                                            n++;
                                                        else{
                                                           n = Integer.parseInt(pts);
                                                           n++;
                                                        }
                                                        score1.setText(Integer.toString(n));
                                                    }
                                                    /*else{
                                                        String pts = score2.getText();
                                                        int n = 0;
                                                        if(pts == null || pts.length() == 0 || pts == "")
                                                            n++;
                                                        else{
                                                           n = Integer.parseInt(pts);
                                                           n++;
                                                        }
                                                        score2.setText(Integer.toString(n));
                                                    }*/
                                                }
                                            }
                                            btn1.setText("");
                                            btn2.setText("");
                                            btn3.setText("");
                                            btn4.setText("");
                                            btn5.setText("");
                                            btn6.setText("");
                                            btn7.setText("");
                                            btn8.setText("");
                                            btn9.setText("");
                                            
                                        }
                                        current++;
                                    }
                                } catch (Exception e) {
                                    //e.printStackTrace();
                                }
                            }

                        }).start();
                    }
                } catch (Exception e) {
                  //  e.printStackTrace();
                }
            }

            public void update(String position) {
                JButton btn = mp.get(position);
                System.out.println(position);
                if (move.equals("x")) {
                    btn.setText("o");
                } else {
                    btn.setText("x");
                }
            }
            public boolean checkWinner() {
                String[][] mat = {{btn1.getText(), btn2.getText(), btn3.getText()},
                {btn4.getText(), btn5.getText(), btn6.getText()}, {btn7.getText(), btn8.getText(), btn9.getText()}};
                for (int i = 0; i < 3; i++) {
                    int flag = 0;
                    String prev = "";
                    for (int j = 0; j < 3; j++) {
                        if (j == 0) {
                            prev = mat[i][j];
                        } else if (prev != mat[i][j]) {
                            prev = mat[i][j];
                            flag = 1;
                            break;
                        }
                    }
                    
                    if (flag == 0) {
                        if(prev.equals(move))
                            return true;
                        else if(prev.equals(""))
                            ;
                        else
                            return false;
                    }
                }
                for (int i = 0; i < 3; i++) {
                    int flag = 0;
                    String prev = "";
                    for (int j = 0; j < 3; j++) {
                        if (j == 0) {
                            prev = mat[j][i];
                        } else if (prev != mat[j][i]) {
                            prev = mat[j][i];
                            flag = 1;
                            break;
                        }
                    }
                    if (flag == 0) {
                        if(prev.equals(move))
                            return true;
                        else if(prev.equals(""))
                            ;
                        else
                            return false;
                    }
                }
                String prev = "";
                int flag = 0;
                for(int i=0; i<3; i++){
                    if(i==0){
                        prev = mat[i][i];
                    }
                    else{
                        if(prev.equals(mat[i][i]) && mat[i][i] != ""){
                            ;
                        }
                        else{
                            flag = 1;
                            break;
                        }
                    }
                }
                if(flag == 0){
                    if(prev.equals(move))
                     return true;
                    else if(prev.equals(""))
                        ;
                    else
                        return false;
                }
                prev = "";
                flag = 0;
                int j = 2;
                for(int i=0; i<3; i++){
                    
                    if(i==0){
                        prev = mat[i][j];
                    }
                    else{
                        if(prev.equals(mat[i][j]) && mat[i][j] != ""){
                            ;
                        }
                        else{
                            flag = 1;
                            break;
                        }
                    }
                    j--;
                }
                if(flag == 0){
                    if(prev.equals(move))
                     return true;
                    else if(prev.equals(""))
                        ;
                    else
                        return false;
                }
                return false;
            }
        }).start();
    }//GEN-LAST:event_hostActionPerformed

    private void connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectActionPerformed
        you.setText(player1);
        moveLabel.setText("Your move");
        choose.setEditable(false);
        isHost = false;
        new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    socket = new Socket("localhost", 2341);
                    DataInputStream din = new DataInputStream(socket.getInputStream());
                    DataOutputStream dout = new DataOutputStream(socket.getOutputStream());
                    dout.writeUTF(player1);
                    String str = din.readUTF();
                    opponent.setText(str);
                    str = din.readUTF();
                    int total = Integer.parseInt(str);
                    num.setText(str);
                    dout.flush();
                    str = din.readUTF();
                    System.out.println("move " + str);
                    String myMove = str;
                    move = myMove;
                    choose.setText(str);
                    while (current < total) {
                        for (int i = 0; i < 2; i++) {
                            if (i == 1) {
                                for (int j = 0; j < 9; j++) {
                                    if (j % 2 == 0) {
                                        turn.setText("yes");
                                        System.out.println("yes");
                                        while (!change){
                                            System.out.println(change + " " + position);
                                        }
                                        dout.writeUTF(Integer.toString(position));
                                        change = false;
                                    } else {
                                        turn.setText("no");
                                        String opponentMove = din.readUTF();
                                        dout.flush();
                                        System.out.println("opp " + opponentMove);
                                        update(opponentMove);
                                    }
                                    if (checkWinner() == true) {
                                                        String pts = score1.getText();
                                                        int n = 0;
                                                        if(pts == null || pts.length() == 0 || pts == "")
                                                            n++;
                                                        else{
                                                           n = Integer.parseInt(pts);
                                                           n++;
                                                        }
                                                        score1.setText(Integer.toString(n));
                                                    }
                                                  /*  else{
                                                        String pts = score2.getText();
                                                        int n = 0;
                                                        if(pts == null || pts.length() == 0 || pts == "")
                                                            n++;
                                                        else{
                                                           n = Integer.parseInt(pts);
                                                           n++;
                                                        }
                                                        score2.setText(Integer.toString(n));
                                                    }*/
                                }
                            } else {
                                for (int j = 0; j < 9; j++) {
                                    if (j % 2 != 0) {
                                        turn.setText("yes");
                                        System.out.println("yes");
                                        while (!change){
                                            System.out.println(change + " " + position);
                                        }
                                        dout.writeUTF(Integer.toString(position));
                                        change = false;

                                    } else {
                                        turn.setText("no");
                                        String opponentMove = din.readUTF();
                                        System.out.println("opp move " +opponentMove);
                                        update(opponentMove);
                                    }
                                    
                                if (checkWinner() == true) {
                                                        String pts = score1.getText();
                                                        int n = 0;
                                                        if(pts == null || pts.length() == 0 || pts == "")
                                                            n++;
                                                        else{
                                                           n = Integer.parseInt(pts);
                                                           n++;
                                                        }
                                                        score1.setText(Integer.toString(n));
                                                    }
                                }
                                                   /* else{
                                                        String pts = score2.getText();
                                                        int n = 0;
                                                        if(pts == null || pts.length() == 0 || pts == "")
                                                            n++;
                                                        else{
                                                           n = Integer.parseInt(pts);
                                                           n++;
                                                        }
                                                        score2.setText(Integer.toString(n));
                                                    }*/
                            }
                            btn1.setText("");
                                            btn2.setText("");
                                            btn3.setText("");
                                            btn4.setText("");
                                            btn5.setText("");
                                            btn6.setText("");
                                            btn7.setText("");
                                            btn8.setText("");
                                            btn9.setText("");
                        }
                        current++;

                    }
                } catch (Exception e) {
                    //e.printStackTrace();
                }
            }

            public void update(String position) {
                JButton btn = mp.get(position);
                System.out.println(position);
                if (move.equals("x")) {
                    btn.setText("o");
                } else {
                    btn.setText("x");
                }
            }

            public boolean checkWinner() {
                String[][] mat = {{btn1.getText(), btn2.getText(), btn3.getText()},
                {btn4.getText(), btn5.getText(), btn6.getText()}, {btn7.getText(), btn8.getText(), btn9.getText()}};
                for (int i = 0; i < 3; i++) {
                    int flag = 0;
                    String prev = "";
                    for (int j = 0; j < 3; j++) {
                        if (j == 0) {
                            prev = mat[i][j];
                        } else if (prev != mat[i][j]) {
                            prev = mat[i][j];
                            flag = 1;
                            break;
                        }
                    }
                    if (flag == 0) {
                        if(prev.equals(move))
                            return true;
                        else if(prev.equals(""))
                            ;
                        else
                            return false;
                    }
                }
                for (int i = 0; i < 3; i++) {
                    int flag = 0;
                    String prev = "";
                    for (int j = 0; j < 3; j++) {
                        if (j == 0) {
                            prev = mat[j][i];
                        } else if (prev != mat[j][i]) {
                            prev = mat[j][i];
                            flag = 1;
                            break;
                        }
                    }
                    if (flag == 0) {
                        if(prev.equals(move))
                            return true;
                        else if(prev.equals(""))
                            ;
                        else
                            return false;
                    }
                }
                String prev = "";
                int flag = 0;
                for(int i=0; i<3; i++){
                    if(i==0){
                        prev = mat[i][i];
                    }
                    else{
                        if(prev.equals(mat[i][i]) && mat[i][i] != ""){
                            ;
                        }
                        else{
                            flag = 1;
                            break;
                        }
                    }
                }
                if(flag == 0){
                    if(prev.equals(move))
                     return true;
                    else if(prev.equals(""))
                        ;
                    else
                        return false;
                }
                prev = "";
                flag = 0;
                int j = 2;
                for(int i=0; i<3; i++){
                    
                    if(i==0){
                        prev = mat[i][j];
                    }
                    else{
                        if(prev.equals(mat[i][j]) && mat[i][j] != ""){
                            ;
                        }
                        else{
                            flag = 1;
                            break;
                        }
                    }
                    j--;
                }
                if(flag == 0){
                    if(prev.equals(move))
                     return true;
                    else if(prev.equals(""))
                        ;
                    else
                        return false;
                }
                return false;
            }

        }).start();

    }//GEN-LAST:event_connectActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String str = choose.getText();
        move = str;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn1ActionPerformed
        // TODO add your handling code here:
        if (turn.getText().equals("no")) {
            JOptionPane.showMessageDialog(null, "not your move");
            return;
        }
        String str = btn1.getText();
        if (str == null || str.length() == 0 || str == "") {
            System.out.println("hey1");
        } else {
            System.out.println("hey2");
            JOptionPane.showMessageDialog(null, "not a valid move");
            return;
        }
        System.out.println("move " + move);
        btn1.setText(move);
        change = true;
        position = 1;
        
    }//GEN-LAST:event_btn1ActionPerformed

    private void btn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn2ActionPerformed

        // TODO add your handling code here:
        if (turn.getText().equals("no")) {
            JOptionPane.showMessageDialog(null, "not your move");
            return;
        }
        String str = btn2.getText();
        if (str == null || str.length() == 0 || str == "") {
            ;
        } else {
            JOptionPane.showMessageDialog(null, "not a valid move");
            return;
        }
        btn2.setText(move);
        change = true;
        position = 2;
    
    }//GEN-LAST:event_btn2ActionPerformed

    private void btn3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn3ActionPerformed
        // TODO add your handling code here:
        if (turn.getText().equals("no")) {
            JOptionPane.showMessageDialog(null, "not your move");
            return;
        }
        String str = btn3.getText();
        if (str == null || str.length() == 0 || str == "") {
            ;
        } else {
            JOptionPane.showMessageDialog(null, "not a valid move");
            return;
        }
        btn3.setText(move);
        change = true;
        position = 3;
    
    }//GEN-LAST:event_btn3ActionPerformed

    private void btn4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn4ActionPerformed
        // TODO add your handling code here:
        if (turn.getText().equals("no")) {
            JOptionPane.showMessageDialog(null, "not your move");
            return;
        }
        String str = btn4.getText();
        if (str == null || str.length() == 0 || str == "") {
            ;
        } else {
            JOptionPane.showMessageDialog(null, "not a valid move");
            return;
        }
        btn4.setText(move);
        change = true;
        position = 4;
    
    }//GEN-LAST:event_btn4ActionPerformed

    private void btn5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn5ActionPerformed
        // TODO add your handling code here:
        if (turn.getText().equals("no")) {
            JOptionPane.showMessageDialog(null, "not your move");
            return;
        }
        String str = btn5.getText();
        if (str == null || str.length() == 0 || str == "") {
            ;
        } else {
            JOptionPane.showMessageDialog(null, "not a valid move");
            return;
        }
        btn5.setText(move);
        change = true;
        position = 5;
   
    }//GEN-LAST:event_btn5ActionPerformed

    private void btn6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn6ActionPerformed
        // TODO add your handling code here:
        if (turn.getText().equals("no")) {
            JOptionPane.showMessageDialog(null, "not your move");
            return;
        }
        String str = btn6.getText();
        if (str == null || str.length() == 0 || str == "") {
            ;
        } else {
            JOptionPane.showMessageDialog(null, "not a valid move");
            return;
        }
        btn6.setText(move);
        change = true;
        position = 6;
    
    }//GEN-LAST:event_btn6ActionPerformed

    private void btn7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn7ActionPerformed
        // TODO add your handling code here:
        if (turn.getText().equals("no")) {
            JOptionPane.showMessageDialog(null, "not your move");
            return;
        }
        String str = btn7.getText();
        if (str == null || str.length() == 0 || str == "") {
            ;
        } else {
            JOptionPane.showMessageDialog(null, "not a valid move");
            return;
        }
        btn7.setText(move);
        change = true;
        position = 7;
     
    }//GEN-LAST:event_btn7ActionPerformed

    private void btn9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn9ActionPerformed
        // TODO add your handling code here:
        String str = btn9.getText();
        if (str == null || str.length() == 0 || str == "") {
            ;
        } else {
            JOptionPane.showMessageDialog(null, "not a valid move");
            return;
        }
        btn9.setText(move);
        change = true;
        position = 9;
 
    }//GEN-LAST:event_btn9ActionPerformed

    private void btn8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn8ActionPerformed
        // TODO add your handling code here:
        if (turn.getText().equals("no")) {
            JOptionPane.showMessageDialog(null, "not your move");
            return;
        }
        if (turn.getText().equals("no")) {
            JOptionPane.showMessageDialog(null, "not your move");
            return;
        }
        String str = btn8.getText();
        if (str == null || str.length() == 0 || str == "") {
            ;
        } else {
            JOptionPane.showMessageDialog(null, "not a valid move");
            return;
        }
        btn8.setText(move);
        change = true;
        position = 8;
      
    }//GEN-LAST:event_btn8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TicTacToe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TicTacToe().setVisible(true);
                player1 = JOptionPane.showInputDialog(null, "enter your name");

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn1;
    private javax.swing.JButton btn2;
    private javax.swing.JButton btn3;
    private javax.swing.JButton btn4;
    private javax.swing.JButton btn5;
    private javax.swing.JButton btn6;
    private javax.swing.JButton btn7;
    private javax.swing.JButton btn8;
    private javax.swing.JButton btn9;
    private javax.swing.JTextField choose;
    private javax.swing.JButton connect;
    private javax.swing.JButton host;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel moveLabel;
    private javax.swing.JTextField num;
    private javax.swing.JTextField opponent;
    private javax.swing.JTextField score1;
    private javax.swing.JTextField score2;
    private javax.swing.JLabel turn;
    private javax.swing.JTextField winner;
    private javax.swing.JTextField you;
    // End of variables declaration//GEN-END:variables
}
